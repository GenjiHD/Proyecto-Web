{
  "version": 3,
  "sources": ["../../@vee-validate/zod/dist/vee-validate-zod.mjs"],
  "sourcesContent": ["/**\r\n  * vee-validate v4.14.7\r\n  * (c) 2024 Abdelrahman Awad\r\n  * @license MIT\r\n  */\r\nimport { ZodObject, ZodDefault, ZodFirstPartyTypeKind } from 'zod';\r\nimport { isNotNestedPath, cleanupNonNestedPath } from 'vee-validate';\r\n\r\nconst isObject = (obj) => obj !== null && !!obj && typeof obj === 'object' && !Array.isArray(obj);\r\nfunction isIndex(value) {\r\n    return Number(value) >= 0;\r\n}\r\nfunction isObjectLike(value) {\r\n    return typeof value === 'object' && value !== null;\r\n}\r\nfunction getTag(value) {\r\n    if (value == null) {\r\n        return value === undefined ? '[object Undefined]' : '[object Null]';\r\n    }\r\n    return Object.prototype.toString.call(value);\r\n}\r\n// Reference: https://github.com/lodash/lodash/blob/master/isPlainObject.js\r\nfunction isPlainObject(value) {\r\n    if (!isObjectLike(value) || getTag(value) !== '[object Object]') {\r\n        return false;\r\n    }\r\n    if (Object.getPrototypeOf(value) === null) {\r\n        return true;\r\n    }\r\n    let proto = value;\r\n    while (Object.getPrototypeOf(proto) !== null) {\r\n        proto = Object.getPrototypeOf(proto);\r\n    }\r\n    return Object.getPrototypeOf(value) === proto;\r\n}\r\nfunction merge(target, source) {\r\n    Object.keys(source).forEach(key => {\r\n        if (isPlainObject(source[key]) && isPlainObject(target[key])) {\r\n            if (!target[key]) {\r\n                target[key] = {};\r\n            }\r\n            merge(target[key], source[key]);\r\n            return;\r\n        }\r\n        target[key] = source[key];\r\n    });\r\n    return target;\r\n}\r\n/**\r\n * Constructs a path with dot paths for arrays to use brackets to be compatible with vee-validate path syntax\r\n */\r\nfunction normalizeFormPath(path) {\r\n    const pathArr = path.split('.');\r\n    if (!pathArr.length) {\r\n        return '';\r\n    }\r\n    let fullPath = String(pathArr[0]);\r\n    for (let i = 1; i < pathArr.length; i++) {\r\n        if (isIndex(pathArr[i])) {\r\n            fullPath += `[${pathArr[i]}]`;\r\n            continue;\r\n        }\r\n        fullPath += `.${pathArr[i]}`;\r\n    }\r\n    return fullPath;\r\n}\r\n\r\n/**\r\n * Transforms a Zod object schema to Yup's schema\r\n */\r\nfunction toTypedSchema(zodSchema, opts) {\r\n    const schema = {\r\n        __type: 'VVTypedSchema',\r\n        async parse(value) {\r\n            const result = await zodSchema.safeParseAsync(value, opts);\r\n            if (result.success) {\r\n                return {\r\n                    value: result.data,\r\n                    errors: [],\r\n                };\r\n            }\r\n            const errors = {};\r\n            processIssues(result.error.issues, errors);\r\n            return {\r\n                errors: Object.values(errors),\r\n            };\r\n        },\r\n        cast(values) {\r\n            try {\r\n                return zodSchema.parse(values);\r\n            }\r\n            catch (_a) {\r\n                // Zod does not support \"casting\" or not validating a value, so next best thing is getting the defaults and merging them with the provided values.\r\n                const defaults = getDefaults(zodSchema);\r\n                if (isObject(defaults) && isObject(values)) {\r\n                    return merge(defaults, values);\r\n                }\r\n                return values;\r\n            }\r\n        },\r\n        describe(path) {\r\n            try {\r\n                if (!path) {\r\n                    return {\r\n                        required: !zodSchema.isOptional(),\r\n                        exists: true,\r\n                    };\r\n                }\r\n                const description = getSchemaForPath(path, zodSchema);\r\n                if (!description) {\r\n                    return {\r\n                        required: false,\r\n                        exists: false,\r\n                    };\r\n                }\r\n                return {\r\n                    required: !description.isOptional(),\r\n                    exists: true,\r\n                };\r\n            }\r\n            catch (_a) {\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    // eslint-disable-next-line no-console\r\n                    console.warn(`Failed to describe path ${path} on the schema, returning a default description.`);\r\n                }\r\n                return {\r\n                    required: false,\r\n                    exists: false,\r\n                };\r\n            }\r\n        },\r\n    };\r\n    return schema;\r\n}\r\nfunction processIssues(issues, errors) {\r\n    issues.forEach(issue => {\r\n        const path = normalizeFormPath(issue.path.join('.'));\r\n        if (issue.code === 'invalid_union') {\r\n            processIssues(issue.unionErrors.flatMap(ue => ue.issues), errors);\r\n            if (!path) {\r\n                return;\r\n            }\r\n        }\r\n        if (!errors[path]) {\r\n            errors[path] = { errors: [], path };\r\n        }\r\n        errors[path].errors.push(issue.message);\r\n    });\r\n}\r\n// Zod does not support extracting default values so the next best thing is manually extracting them.\r\n// https://github.com/colinhacks/zod/issues/1944#issuecomment-1406566175\r\nfunction getDefaults(schema) {\r\n    if (!(schema instanceof ZodObject)) {\r\n        return undefined;\r\n    }\r\n    return Object.fromEntries(Object.entries(schema.shape).map(([key, value]) => {\r\n        if (value instanceof ZodDefault) {\r\n            return [key, value._def.defaultValue()];\r\n        }\r\n        if (value instanceof ZodObject) {\r\n            return [key, getDefaults(value)];\r\n        }\r\n        return [key, undefined];\r\n    }));\r\n}\r\n/**\r\n * @deprecated use toTypedSchema instead.\r\n */\r\nconst toFieldValidator = toTypedSchema;\r\n/**\r\n * @deprecated use toTypedSchema instead.\r\n */\r\nconst toFormValidator = toTypedSchema;\r\nfunction getSchemaForPath(path, schema) {\r\n    if (!isObjectSchema(schema)) {\r\n        return null;\r\n    }\r\n    if (isNotNestedPath(path)) {\r\n        return schema.shape[cleanupNonNestedPath(path)];\r\n    }\r\n    const paths = (path || '').split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\r\n    let currentSchema = schema;\r\n    for (let i = 0; i <= paths.length; i++) {\r\n        const p = paths[i];\r\n        if (!p || !currentSchema) {\r\n            return currentSchema;\r\n        }\r\n        if (isObjectSchema(currentSchema)) {\r\n            currentSchema = currentSchema.shape[p] || null;\r\n            continue;\r\n        }\r\n        if (isIndex(p) && isArraySchema(currentSchema)) {\r\n            currentSchema = currentSchema._def.type;\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction getDefType(schema) {\r\n    return schema._def.typeName;\r\n}\r\nfunction isArraySchema(schema) {\r\n    return getDefType(schema) === ZodFirstPartyTypeKind.ZodArray;\r\n}\r\nfunction isObjectSchema(schema) {\r\n    return getDefType(schema) === ZodFirstPartyTypeKind.ZodObject;\r\n}\r\n\r\nexport { toFieldValidator, toFormValidator, toTypedSchema };\r\n"],
  "mappings": "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",
  "names": []
}
